#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Worker;

Getopt::Long::Configure('no_ignorecase');

my %options;
GetOptions(
    \%options,
    'help',
    'version',
    'debug',
    'lazy',
    'job=s',
    'job-param=s@',
    'wait=i',
    'task=s',
    'task-param=s@',
    'target=s',
    'target-param=s@',
    'conf-file=s'
) or pod2usage(-verbose => 0);

if ($options{help}) {
    pod2usage(-verbose => 0);
}
if ($options{version}) {
    print $FusionInventory::Agent::VERSION_STRING . "\n";
    exit 0;
}
if (!$options{job}) {
    pod2usage(
        -message => 'Without an explicit job, a task is mandatory',
        -verbose => 0,
        -exitval => 2,
    ) if !$options{task};
    pod2usage(
        -message => 'Without an explicit job, a target is mandatory',
        -verbose => 0,
        -exitval => 2,
    ) if !$options{target};
}

my ($job_params, $task_params, $target_params);
foreach my $param (@{$options{'job-param'}}) {
    die "invalid job parameter $param"
        unless $param =~ /^(\S+)=(\S+)$/;
    $job_params->{$1} = $2;
}
foreach my $param (@{$options{'task-param'}}) {
    die "invalid task parameter $param"
        unless $param =~ /^(\S+)=(\S+)$/;
    $task_params->{$1} = $2;
}
foreach my $param (@{$options{'target-param'}}) {
    die "invalid target parameter $param"
        unless $param =~ /^(\S+)=(\S+)$/;
    $target_params->{$1} = $2;
}

if ($options{wait}) {
    my $delay = int rand($options{wait});
    sleep($delay);
}

my $worker = FusionInventory::Agent::Worker->new(
    confdir   => './etc/fusioninventory',
    datadir   => './share',
    vardir    => './var',
    debug     => $options{debug},
    lazy      => $options{lazy},
    conffile  => $options{'conf-file'},
);

eval {
    $worker->run(
        job           => $options{job},
        task          => $options{task},
        target        => $options{target},
        job_params    => $job_params,
        task_params   => $task_params,
        target_params => $target_params
    );
};

if ($EVAL_ERROR) {
    print STDERR $EVAL_ERROR;
    exit 2;
}
__END__

=head1 NAME

fusioninventory-worker - FusionInventory worker

=head1 SYNOPSIS

B<fusioninventory-worker> [options] --job <job>

B<fusioninventory-worker> [options] --target <target> --task <task>

  Options:
    --conf-file FILE         configuration file
    --debug                  debug mode
    --lazy                   do not run this job out of schedule
    --wait TIME              wait a random delay before running
    --job-param key=value    pass additional parameter to the job
    --task-param key=value   pass additional parameter to the task
    --target-param key=value pass additional parameter to the target
    --version                display the agent version
    --help                   display usage instructions

=head1 EXAMPLES

    %> fusioninventory-worker --job inventory

This executes the job defined as I<inventory> in configuration

    %> fusioninventory-worker --task inventory --target stdout

This executes a job defined on-the-fly with the task defined as I<inventory> in
configuration and the target defined as I<stdout> in configuration

=head1 DESCRIPTION

B<fusioninventory-worker> executes a single job
