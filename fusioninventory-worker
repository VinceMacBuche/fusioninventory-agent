#!/usr/bin/perl

use strict;
use warnings;
use lib './lib';

use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use FusionInventory::Agent;
use FusionInventory::Agent::Worker;

Getopt::Long::Configure('no_ignorecase');

my %options;
GetOptions(
    \%options,
    'help',
    'version',
    'debug',
    'lazy',
    'job=s',
    'wait=i',
    'task=s',
    'task-param=s@',
    'target=s',
    'target-param=s@',
    'conf-file=s'
) or pod2usage(-verbose => 0);

if ($options{help}) {
    pod2usage(-verbose => 0);
}
if ($options{version}) {
    print $FusionInventory::Agent::VERSION_STRING . "\n";
    exit 0;
}
if (!$options{job}) {
    pod2usage(
        -message => "No job, no task and no target, aborting\n",
        -verbose => 0,
        -exitval => 2,
    ) if !$options{task} && !$options{target};
    pod2usage(
        -message => "No task to execute against this target, aborting\n",
        -verbose => 0,
        -exitval => 2,
    ) if !$options{task};
    pod2usage(
        -message => "No target to send the result of this task, aborting\n",
        -verbose => 0,
        -exitval => 2,
    ) if !$options{target};
}

my ($task_params, $target_params);
foreach my $param (@{$options{'task-param'}}) {
    die "invalid task parameter $param"
        unless $param =~ /^(\S+)=(\S+)$/;
    $task_params->{$1} = $2;
}
foreach my $param (@{$options{'target-param'}}) {
    die "invalid target parameter $param"
        unless $param =~ /^(\S+)=(\S+)$/;
    $target_params->{$1} = $2;
}

if ($options{wait}) {
    my $delay = int rand($options{wait});
    sleep($delay);
}

my $worker = FusionInventory::Agent::Worker->new(
    confdir   => './etc/fusioninventory',
    datadir   => './share',
    vardir    => './var',
    debug     => $options{debug},
    lazy      => $options{lazy},
    conffile  => $options{'conf-file'},
);

eval {
    $worker->run(
        job           => $options{job},
        task          => $options{task},
        target        => $options{target},
        task_params   => $task_params,
        target_params => $target_params
    );
};

if ($EVAL_ERROR) {
    print STDERR $EVAL_ERROR;
    exit 2;
}
__END__

=head1 NAME

fusioninventory-worker - FusionInventory worker

=head1 SYNOPSIS

B<fusioninventory-worker>
    [B<--conf-file> file] [B<--debug>] [B<--wait> time]
    [B<--task-param> key=value] [B<--target-param> key=value]
    [B<--lazy>] B<--job> job

B<fusioninventory-worker>
    [B<--conf-file> file] [B<--debug>] [B<--wait> time]
    [B<--task-param> key=value] [B<--target-param> key=value]
    B<--target> target B<--task> task

=head1 DESCRIPTION

B<fusioninventory-worker> executes a single job.

=head1 OPTIONS

=over

=item --conf-file <file>

Use the given configuration file.

=item --debug

Set debug mode.

=item --lazy

Do not run this job out of schedule.

=item --wait <time>

Wait a random delay before running.

=item --job-param <key=value>

Pass additional parameter to the job.

=item --task-param <key=value>

Pass additional parameter to the task.

=item --target-param <key=value>

Pass additional parameter to the target.

=item --version

Display the agent version.

=item --help

Display usage instructions.

=back

=head1 EXAMPLES

All exemples use the following configuration file:

    [stdout_inventory]
    task = inventory
    target = stdout

    [inventory]
    type = inventory

    [stdout]
    type = stdout

%> fusioninventory-worker --job stdout_inventory

This executes the job defined as I<stdout_inventory>

%> fusioninventory-worker --task inventory --target stdout

This executes an anonymous job defined on-the-fly with the task defined as
I<inventory> and the target defined as I<stdout>
