#!/usr/bin/perl
###############################################################################
##Copyleft Pascal DANEK 2005
##Copyleft Goneri Le Bouder 2006
##Copyleft FusionInventory Project 2010
##Web : http://www.FusionInventory.org
##
##This code is open source and may be copied and modified as long as the source
##code is always made freely available.
##Please refer to the General Public Licence http://www.gnu.org/ or Licence.txt
################################################################################

use strict;
use warnings;

use English qw(-no_match_vars);
use LWP::UserAgent;
use XML::Simple;
use Compress::Zlib;
use Getopt::Long;
use Pod::Usage;
my $help;
my $directory;
my $file;
my $url;
my $useragent;
my $remove;
my $verbose;
my $stdin;

sub loadfile {
    my $file = shift;

    unless ( -r $file ) {
        print STDERR "Can't read $file\n";
        return;
    }
    print "Loading $file..." if $verbose;

    open (my $fh, '<', $file) or die "can't open $file: $ERRNO";
    local $RS;
    my $content = <$fh>;
    close $fh or die "Can't close file $file: $ERRNO";

    sendContent($content);

}

sub loaddirectory {
    my $directory = shift;

    unless ( -r $directory ) {
        print STDERR "Can't read $directory: $!\n";
        return;
    }

    opendir (my $dh, $directory) or die "can't opendir $directory: $ERRNO";
    foreach ( readdir($dh) ) {
        loadfile("$directory/$_") if (/\.ocs$/);
    }
    closedir $dh;
}

sub loadstdin {
    my $content;
    undef $RS;
    $content = <STDIN>;
    sendContent($content);
}

sub sendContent {
    my $content = shift;

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    my $request = HTTP::Request->new( POST => $url );
    $request->header(
        'Pragma' => 'no-cache',
        'Content-type', 'Application/x-compress'
    );
    if (uncompress($content)) {
        $content = uncompress($content);
    }
    $request->content(compress($content));
    my $res = $ua->request($request);

    if ($res->is_success){
        print "OK\n" if $verbose;
        print STDERR "Can't remove $file: $ERRNO\n"
        if ($remove && (!unlink $file));
    } else {
        if ($verbose){
            print "ERROR: ";
            print $res->status_line(), "\n";
        }
    }
}

GetOptions(
  'h|help'        => \$help,
  'd|directory=s' => \$directory,
  'f|file=s'      => \$file,
  'u|url=s'       => \$url,
  'useragent=s'   => \$useragent,
  'r|remove'      => \$remove,
  'v|verbose'     => \$verbose,
  'stdin'         => \$stdin,
);

# Default values
$useragent      = 'FusionInventory-Injector' unless $useragent;
###

$OUTPUT_AUTOFLUSH = 1;

if ($file && -f $file) {
    loadfile($file);
} elsif ($stdin) {
    loadstdin();
} elsif ($directory) {
    die("Directory does not exist. Abort.") unless -d $directory;
    loaddirectory($directory);
} else {
    pod2usage();
}

__END__

=head1 NAME

fusioninventory-injector - A tool to push inventory in an OCS Inventory or compatible server.

=head1 SYNOPSIS

fusioninventory-injector [options] [--file <file>|--directory <directory|--stdin]

  Options:
    -h --help      this menu
    -d --directory load every .ocs files from a directory
    -f --file      load a speficic file
    -u --url       server URL
    -r --remove    remove succesfuly injected files
    -m --msg       show message returned by server
    -v --verbose   verbose mode
    --stdin        read data from STDIN

  Examples:
    fusioninventory-injector -v -f /tmp/toto-2010-09-10-11-42-22.ocs --url https://login:pw@server/ocsinventory

=head1 DESCRIPTION

This tool can be used to test your server, do benchmark or push inventory from
off-line machine.
